<style>
.form-group {
    margin-bottom: 20px;
}
.autocomplete {
  position: relative;
  display: inline-block;
  flex-direction: column;
}
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>

<div class="container">
    <div class="form-wrapper">
        <form id="form-create-callCard" action="/create/new-callcard" method="post" autocomplete="off">
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label for="userid">Id Đọc Giả</label>
                        <div class="autocomplete" style="width:100%">
                            <input 
                                type="text" 
                                class="input-box" 
                                name="userid" 
                                id="userid" 
                                class="input-box"
                                rules="required"
                            />
                            <span id="error"></span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="idCard">Mã Phiếu Mượn</label>
                        <input 
                            type="text" 
                            name="idCard" 
                            id="idCard" 
                            class="input-box"
                            rules="required|nonSpecialValue"
                        />
                        <span id="error"></span>
                    </div>
                </div>

                <div class="col-6">
                    <div class="form-group">
                        <label for="borrowedDate">Ngày Mượn</label>
                        <input
                            type="date"
                            name="borrowedDate"
                            id="borrowedDate"
                            class="input-box"
                            rules="required"
                        />
                        <span id="error"></span>
                    </div>
                    <div class="form-group">
                        <label for="returnDate">Ngày Trả</label>
                        <input
                            type="date"
                            name="returnDate"
                            id="returnDate"
                            class="input-box"
                            rules="required"
                        />
                        <span id="error"></span>
                    </div>
                    <div class="form-group">
                        <label for="fine">Tiền Phạt</label>
                        <input 
                            type="text" 
                            name="fine" 
                            id="fine" 
                            class="input-box"
                            rules="required|number"
                        />
                        <span id="error"></span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="form-group">
                            <label for="note">Ghi Chú</label>
                            <textarea
                                class="form-control"
                                name="note"
                                id="note"
                                rows="3"
                                style="width: 100%; height: 100px"
                                class="input-box"
                                rules="nonSpecialValue"
                            ></textarea>
                            <span id="error"></span>
                        </div>
                    </div>
                </div>
                <div class="button-wrapper">
                    <a
                        href="/admin/callcard"
                        type="submit"
                        id="btn-back"
                        class="button"
                        >Tra Cứu Phiếu Mượn</a
                    >
                    <button
                        type="submit"
                        id="btn-create"
                        class="button"
                    >
                        Tạo Phiếu Mượn
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>

function autocomplete(inp, arr) {
    
    var currentFocus;
    
    inp.addEventListener("input", function (e) {
        var a,
            b,
            i,
            val = this.value;

        closeAllLists();
        if (!val) {
            return false;
        }
        currentFocus = -1;

        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        
        this.parentNode.appendChild(a);
       
        for (i = 0; i < arr.length; i++) {
           
            if (
                arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()
            ) {
                
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML =
                    "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function (e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function (e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
          increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) {
            //up
            /*If the arrow UP key is pressed,
          decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = x.length - 1;
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
      except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
}

    let arruser1 =[]
    {{#each arruser}}
        arruser1.push('{{this}}')
    {{/each}}

autocomplete(document.getElementById('userid'), arruser1)

</script>

<script>
      Validator("#form-create-callCard");
</script>